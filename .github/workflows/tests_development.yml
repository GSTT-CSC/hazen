# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Development tests

on:
  pull_request:
    branches:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: hazen_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_user_password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2

    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        activate-environment: anaconda-client-env
        environment-file: environment.yml
        python-version: 3.9.7
        auto-activate-base: false

    - name: Conda info
      run: conda info

    - name: Conda list
      run: conda list

    - name: Install flake8 & pytest
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov

    - name: Setup flake8 annotations
      uses: rbialon/flake8-annotations@v1

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        set -o pipefail
        pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=hazenlib tests/ | tee pytest-coverage.txt ; echo $?

    - name: Pytest coverage comment
      id: coverageComment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./pytest.xml

    - name: Update the coverage Badge
      if: github.event.pull_request.base.ref == 'master'  # if pull request is merging into master
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.PYTEST_COVERAGE_COMMENT }}
        gistID: ba102d5f3e592fcd50451c2eff8a803d
        filename: hazen_pytest-coverage-comment.json
        label: Test coverage
        message: ${{ steps.coverageComment.outputs.coverage }}
        color: ${{ steps.coverageComment.outputs.color }}
        namedLogo: python